name: Test, Build & Deploy
on:
  push:
    branches:
      - puneet-cicddevops
env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  RUN_REGION: us-central1
  SERVICE_NAME: helloworld-node

jobs:
  Build:   
       name: Builds
       runs-on: ubuntu-latest
       strategy:
         matrix:
          node-version: [13.x]
       env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
       steps:      
        - uses: actions/checkout@v2
        - name: Use Node.js ${{ matrix.node-version }}
          id: setup_NodeJS
          uses: actions/setup-node@v1
          with:
            node-version: ${{ matrix.node-version }}
        - name: npm Install
          id: npm_install
          run: npm install      
        - name: npm Build
          id: npm_build
          run: npm run build --if-present
        - run: npm install jasmine-node
  
  UnitTest:
       name: Unittest
       runs-on: ubuntu-latest
       needs: [Build] 
       steps:
        - uses: actions/checkout@v2
        - run: npm install
#         - name: npm test
#           id: npm_test
#           run: npm test
        - uses: mattallty/jest-github-action@v1.0.3
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
          # this is just an example, this could be any command that will trigger jest
            test-command: "npm test --coverage"
          #coverage-comment: true
  Linter:
       name: Run linters & prettier
       runs-on: ubuntu-latest
       needs: [UnitTest]
       if: success()
       steps:
#          - uses: wearerequired/lint-action@v1
#            with:
#             github_token: ${{ secrets.GITHUB_TOKEN }}
          # Enable linters
#             eslint: true
#             prettier: true
         - name: npm prettier
           id: npm_prettier
           run: npm install --save-dev --save-exact prettier
#          - name: npm format
#            id: npm_format
#            run: npm run format
         - name: npm lint
           id: npm_lint
           run: npm install eslint --save-dev
           
  imageBuild:
      name: Build & Publish image to GCR      
      runs-on: ubuntu-18.04
      needs: [Linter,Blackduck-SCA,Polaris-scan]      
      steps:        
        - uses: actions/checkout@v2
        # Setup gcloud CLI
        - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
          with:
            version: '290.0.1'
            service_account_key: ${{ secrets.RUN_SA_KEY }}
            project_id: ${{ secrets.RUN_PROJECT }}

        # Build and push image to Google Container Registry
        - name: Build
          run: |-
            gcloud builds submit \
              --quiet \
              --tag "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA"
  provision:
    name: Env Provision(Terraform)     
    runs-on: ubuntu-18.04
    needs: [imageBuild]
    env:
      REPO: ${{ secrets.DOCKER_REPO }} 
    # Setup terraform CLI
    steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # Terraform script checkout
    - name: Terraform repository checkout 
      uses: actions/checkout@v2
      with:
        repository: prasadjblin/tf-store
        path: istudio-tf-scripts        
        ssh-strict: false
        #ssh-key: ${{ secrets.MGMT_SSH }}

    - name: Terraform init
      id: init
      run: terraform init
      continue-on-error: false
      working-directory: ./istudio-tf-scripts
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Refresh
      id: refresh
      run: terraform refresh
      continue-on-error: false
      working-directory: ./istudio-tf-scripts
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Plan
      id: plan
      run: terraform plan
      continue-on-error: false
      working-directory: ./istudio-tf-scripts
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}   
  deploy:
    name: Deploy image to Cloud Run
    runs-on: ubuntu-18.04
    needs: [provision]       
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.RUN_SA_KEY }}
        project_id: ${{ secrets.RUN_PROJECT }}
    - name: Deploy
      run: |-
        gcloud run deploy "$SERVICE_NAME" \
          --quiet \
          --region "$RUN_REGION" \
          --image "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" --platform "managed" --allow-unauthenticated
  serviceAvailability:
    name: Service Availability Check
    runs-on: ubuntu-18.04
    needs: [deploy]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    steps:
      - name: Check the deployed service URL
        uses: jtalk/url-health-check-action@v1.2
        with:
          # Check the following URLs one by one sequentially
          url: https://helloworld-node-y44tbssw4a-uc.a.run.app
          follow-redirect: no # Optional, defaults to "no"
          max-attempts: 3 # Optional, defaults to 1
          retry-delay: 5s # Optional, only applicable to max-attempts > 1
#   publish-test-results:
#     name: "Publish Unit Tests Results"
#     needs: [UnitTest]
#     runs-on: ubuntu-latest
#     # the build-and-test job might be skipped, we don't need to run this job then
#     if: success() || failure()

#     steps:
#       - name: Download Artifacts
#         uses: actions/download-artifact@v2
#         with:
#           path: artifacts

#       - name: Publish Unit Test Results
#         uses: EnricoMi/publish-unit-test-result-action@v1.6
#         with:
#           check_name: Unit Test Results
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           files: jest-junit.xml

#   Publish-result:
#     name: Publish Unit Test Results
#     needs: [Build,UnitTest]
#     runs-on: ubuntu-latest
#     steps:
#      - uses: mikepenz/action-junit-report@v1
#       # if: always()
#        with:
#          github_token: ${{secrets.GITHUB_TOKEN }}
#          path: jest-junit.xml
  
  Polaris-scan:
    name: "Polaris Scan"
    needs: [UnitTest]
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success()
    steps:        
      - uses: actions/checkout@v2       
      - name: Static Analysis with Polaris
        shell : bash 
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export POLARIS_SERVER_URL=${{ secrets.POLARIS_SERVER_URL}}
          export POLARIS_ACCESS_TOKEN=${{ secrets.POLARIS_ACCESS_TOKEN}}
          wget -q https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip
          unzip -j polaris_cli-linux64.zip -d /tmp
          /tmp/polaris -c polaris.yml analyze -w --coverity-ignore-capture-failure
#   Blackduck-SCA:
#     name: "Blackduck Scan"
#     needs: [UnitTest]
#     runs-on: ubuntu-latest
#     # the build-and-test job might be skipped, we don't need to run this job then
#     if: success()
#     steps:        
#       - uses: actions/checkout@v2
#       - name: Software Composition Analysis with Black Duck
#         uses: blackducksoftware/github-action@v2
#         with:
#           args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" --detect.tools="DETECTOR"'

  Blackduck-SCA:
    name: "Blackduck Scan"
    needs: [UnitTest]
    runs-on: ubuntu-16.04
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success()
    steps:        
      - uses: actions/checkout@v2
      - run: npm install
      - name: Software Composition Analysis with Black Duck
        uses: blackducksoftware/github-action@v2
        with:
          args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" --detect.tools="DETECTOR" --logging.level.com.synopsys.integration="DEBUG"'
    
    #load-test
  load-test:
    name: Performance Test
    needs: [serviceAvailability]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v1
      #- uses: actions/checkout@v2
      - name: Job starting
        uses: act10ns/slack@v1
        with:
              status: starting
#               channel: '#nilasishtest'
        if: always()
      # Runs a single command using the runners shell
      - name: Run local k6 test
        uses: k6io/action@v0.1
        with:
              filename: test.js
              cloud: true
              token: 29e1e5f6d3f46ec287c75f8eb8d98439defba0ba848a3eacf84838a0a8674271
      - name: Slack notification
        uses: act10ns/slack@v1
        with:
             status: ${{ job.status }}
             steps: ${{ toJson(steps) }}
#              channel: '#nilasishtest'
        if: always()
  # This workflow contains a single job called "build"
  Integration_Test:
    # The type of runner that the job will run on
    needs: [serviceAvailability]
    runs-on: ubuntu-latest
    env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    name: Integration Testing

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Start Selenoid
        id: Starting_elenoid
        uses: Xotabu4/selenoid-github-action@v1
      - name: Job starting
        uses: act10ns/slack@v1
        with:
              status: starting
#               channel: '#nilasishtest'
        if: always()
      - uses: actions/checkout@v1
      - name: NPM INSTALL
        id: installing_NPM
        run: npm install
      - run: npm ci  
      - name: Run Tests
        id: Running_tests
        run: npm test
      - name: Test Completed
        uses: act10ns/slack@v1
        with:
              status: Finished Successfully
#               channel: '#nilasishtest'
        if: always()

