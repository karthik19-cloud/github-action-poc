name: Test, Build & Deploy
on:
  push:
    branches:
      - ci-cd-gk
env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  RUN_REGION: us-central1
  SERVICE_NAME: helloworld-node
jobs:
  test:
    name: Build & test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:      
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        id: setup_NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm Install
        id: npm_install
        run: npm install     
      - name: Run unit test
        uses: mattallty/jest-github-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # this is just an example, this could be any command that will trigger jest
          test-command: "npm test --coverage"
          #coverage-comment: true
      - name: npm Build
        id: npm_build
        run: npm run build --if-present

 lint:
      name: Lint & Prettier      
      runs-on: ubuntu-18.04
      needs: [test]    
      steps:        
        - uses: actions/checkout@v2
        - name: npm Install
          run: npm install eslint prettier --save-dev     
  

  imageBuild:
      name: Image Build & Publish to GCR      
      runs-on: ubuntu-18.04
      needs: [lint, Polaris-scan, Blackduck-SCA]
      if: success()
      steps:        
        - uses: actions/checkout@v2
        # Setup gcloud CLI
        - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
          with:
            version: '290.0.1'
            service_account_key: ${{ secrets.RUN_SA_KEY }}
            project_id: ${{ secrets.RUN_PROJECT }}

        # Build and push image to Google Container Registry
        - name: Build
          run: |-
            gcloud builds submit \
              --quiet \
              --tag "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA"
         
  provision:
    name: Env Provision(Terraform)     
    runs-on: ubuntu-18.04
    needs: [imageBuild]
    if: success()
    env:
      REPO: ${{ secrets.DOCKER_REPO }} 
    # Setup terraform CLI
    steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # Terraform script checkout
    - name: Terraform repository checkout 
      uses: actions/checkout@v2
      with:
        repository: prasadjblin/tf-store
        path: istudio-tf-scripts        
        ssh-strict: false
        #ssh-key: ${{ secrets.MGMT_SSH }}

    - name: Terraform init
      id: init
      run: terraform init
      continue-on-error: false
      working-directory: ./istudio-tf-scripts
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Refresh
      id: refresh
      run: terraform refresh
      continue-on-error: false
      working-directory: ./istudio-tf-scripts
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Plan
      id: plan
      run: terraform plan
      continue-on-error: false
      working-directory: ./istudio-tf-scripts
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}   
      
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-18.04
    needs: [provision]
    if: success()
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.RUN_SA_KEY }}
        project_id: ${{ secrets.RUN_PROJECT }}
    - name: Deploy
      run: |-
        gcloud run deploy "$SERVICE_NAME" \
          --quiet \
          --region "$RUN_REGION" \
          --image "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" --platform "managed" --allow-unauthenticated
 
  serviceAvailability:
    name: Service Availability Check
    runs-on: ubuntu-18.04
    needs: [deploy]
    if: success()
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    steps:
      - name: Check the deployed service URL
        uses: jtalk/url-health-check-action@v1.2
        with:
          # Check the following URLs one by one sequentially
          url: https://helloworld-node-y44tbssw4a-uc.a.run.app
          follow-redirect: no # Optional, defaults to "no"
          max-attempts: 3 # Optional, defaults to 1
          retry-delay: 5s # Optional, only applicable to max-attempts > 1

             
     
  Polaris-scan:
    name: "Polaris Scan"
    needs: [test]
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success()
    steps:        
      - uses: actions/checkout@v2       
      - name: Static Analysis with Polaris
        shell : bash 
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export POLARIS_SERVER_URL=${{ secrets.POLARIS_SERVER_URL}}
          export POLARIS_ACCESS_TOKEN=${{ secrets.POLARIS_ACCESS_TOKEN}}
          wget -q https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip
          unzip -j polaris_cli-linux64.zip -d /tmp
          /tmp/polaris -c polaris.yml analyze -w --coverity-ignore-capture-failure
   
  Blackduck-SCA:
    name: "Blackduck Scan"
    needs: [test]
    runs-on:  ubuntu-16.04
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success()
    steps:        
      - uses: actions/checkout@v2
      - run: npm install
      - name: Software Composition Analysis with Black Duck
        uses: blackducksoftware/github-action@v2
        with:
          args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" --detect.tools="DETECTOR" --logging.level.com.synopsys.integration="DEBUG"'
